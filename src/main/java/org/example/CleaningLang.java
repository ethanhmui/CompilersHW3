package org.example;/* Generated By:JavaCC: Do not edit this line. CleaningLang.java Version 8.0.0 */
import org.example.ParseException;

/**
 * Simple brace matcher.
 */
import org.example.CleanedItems;
import org.example.CleaningLangConstants;


public class CleaningLang implements CleaningLangConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    CleaningLang parser = new CleaningLang(System.in);
    parser.Input();
  }



/** Root production. */
  static final public void Input() throws ParseException {
    trace_call("Input");
    try {

      Paragraph();
 CleanedItems.getInstance().describe();                                        
    } finally {
      trace_return("Input");
    }
}



/** Brace counting production. */
  static final public void Paragraph() throws ParseException {
    trace_call("Paragraph");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WASH:
      case SWEEP:
      case MOP:
      case VACUUM:
      case STRAIGHTEN:{
        Sentence();
        Paragraph();
        break;
        }
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Paragraph");
    }
}


  static final public void Sentence() throws ParseException {
    trace_call("Sentence");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WASH:{
        jj_consume_token(WASH);
        jj_consume_token(THE);
        Item();
        jj_consume_token(16);
        break;
        }
      case SWEEP:
      case MOP:
      case VACUUM:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SWEEP:{
          jj_consume_token(SWEEP);
          break;
          }
        case MOP:{
          jj_consume_token(MOP);
          break;
          }
        case VACUUM:{
          jj_consume_token(VACUUM);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(THE);
        jj_consume_token(FLOOR);
CleanedItems.getInstance().setHaveFloorsBeenCleaned();
        jj_consume_token(16);
        break;
        }
      case STRAIGHTEN:{
        jj_consume_token(STRAIGHTEN);
        jj_consume_token(THE);
        jj_consume_token(PAPERS);
CleanedItems.getInstance().setHavePapersBeenStraightened();
        jj_consume_token(16);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Sentence");
    }
}



  static final public void Item() throws ParseException {
    trace_call("Item");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISHES:{
        jj_consume_token(DISHES);
CleanedItems.getInstance().setHaveDishesBeenCleaned();
        break;
        }
      case LAUNDRY:{
        jj_consume_token(LAUNDRY);
CleanedItems.getInstance().setHasLaundryBeenCleaned();
        break;
        }
      case BATHROOMS:{
        jj_consume_token(BATHROOMS);
CleanedItems.getInstance().setHaveBathroomsBeenCleaned();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Item");
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CleaningLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
    jj_la1_init_0();
 }
 private static void jj_la1_init_0() {
    jj_la1_0 = new int[] {0x3e1,0x1c0,0x3e0,0x3800,};
 }

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public CleaningLang(java.io.InputStream stream) {
   this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CleaningLang(java.io.InputStream stream, String encoding) {
  if (jj_initialized_once) {
    System.out.println("ERROR: Second call to constructor of static parser.  ");
    System.out.println("     You must either use ReInit() or set the JavaCC option STATIC to false");
    System.out.println("     during parser generation.");
    throw new Error();
  }
  jj_initialized_once = true;
  try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
  token_source = new CleaningLangTokenManager(jj_input_stream);
  token = new Token();
  jj_ntk = -1;
  jj_gen = 0;
  for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
   ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
  try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
  token_source.ReInit(jj_input_stream);
  token = new Token();
  jj_ntk = -1;
  jj_gen = 0;
  for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CleaningLang(java.io.Reader stream) {
  if (jj_initialized_once) {
    System.out.println("ERROR: Second call to constructor of static parser. ");
    System.out.println("     You must either use ReInit() or set the JavaCC option STATIC to false");
    System.out.println("     during parser generation.");
    throw new Error();
  }
  jj_initialized_once = true;
  jj_input_stream = new SimpleCharStream(stream, 1, 1);
  token_source = new CleaningLangTokenManager(jj_input_stream);
  token = new Token();
  jj_ntk = -1;
  jj_gen = 0;
  for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
 if (jj_input_stream == null) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
 } else {
    jj_input_stream.ReInit(stream, 1, 1);
 }
 if (token_source == null) {
 token_source = new CleaningLangTokenManager(jj_input_stream);
 }

  token_source.ReInit(jj_input_stream);
  token = new Token();
  jj_ntk = -1;
  jj_gen = 0;
  for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CleaningLang(CleaningLangTokenManager tm) {
  if (jj_initialized_once) {
    System.out.println("ERROR: Second call to constructor of static parser. ");
    System.out.println("     You must either use ReInit() or set the JavaCC option STATIC to false");
    System.out.println("     during parser generation.");
    throw new Error();
  }
  jj_initialized_once = true;
  token_source = tm;
  token = new Token();
  jj_ntk = -1;
  jj_gen = 0;
  for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CleaningLangTokenManager tm) {
  token_source = tm;
  token = new Token();
  jj_ntk = -1;
  jj_gen = 0;
  for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
  Token oldToken;
  if ((oldToken = token).next != null) token = token.next;
  else token = token.next = token_source.getNextToken();
  jj_ntk = -1;
  if (token.kind == kind) {
    jj_gen++;
    trace_token(token, "");
    return token;
  }
  token = oldToken;
  jj_kind = kind;
  throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
  if (token.next != null) token = token.next;
  else token = token.next = token_source.getNextToken();
  jj_ntk = -1;
  jj_gen++;
    trace_token(token, " (in getNextToken)");
  return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
  Token t = token;
  for (int i = 0; i < index; i++) {
    if (t.next != null) t = t.next;
    else t = t.next = token_source.getNextToken();
  }
  return t;
  }

  static private int jj_ntk_f() {
  if ((jj_nt=token.next) == null)
    return (jj_ntk = (token.next=token_source.getNextToken()).kind);
  else
    return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
  jj_expentries.clear();
  boolean[] la1tokens = new boolean[17];
  if (jj_kind >= 0) {
    la1tokens[jj_kind] = true;
    jj_kind = -1;
  }
  for (int i = 0; i < 4; i++) {
    if (jj_la1[i] == jj_gen) {
    for (int j = 0; j < 32; j++) {
      if ((jj_la1_0[i] & (1<<j)) != 0) {
      la1tokens[j] = true;
      }
    }
    }
  }
  for (int i = 0; i < 17; i++) {
    if (la1tokens[i]) {
    jj_expentry = new int[1];
    jj_expentry[0] = i;
    jj_expentries.add(jj_expentry);
    }
  }
  int[][] exptokseq = new int[jj_expentries.size()][];
  for (int i = 0; i < jj_expentries.size(); i++) {
    exptokseq[i] = jj_expentries.get(i);
  }
  return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
  return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
  trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
  trace_enabled = false;
  }

  static protected void trace_call(String s) {
  if (trace_enabled) {
    for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
    System.out.println("Call: " + s);
  }
  trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
  trace_indent = trace_indent - 2;
  if (trace_enabled) {
    for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
    System.out.println("Return: " + s);
  }
  }

  static protected void trace_token(Token t, String where) {
  if (trace_enabled) {
    for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
    System.out.print("Consumed token: <" + tokenImage[t.kind]);
    if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
    System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
    }
    System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
  }
  }

  static protected void trace_scan(Token t1, int t2) {
  if (trace_enabled) {
    for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
    System.out.print("Visited token: <" + tokenImage[t1.kind]);
    if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
    System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
    }
    System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
  }
  }



}

 

/* JavaCC - OriginalChecksum=62423e5b9a92f5aa43413f9c04d7b441 (do not edit this line) */
